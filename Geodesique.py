##  Tables de valeurs

import sympy as sp
import numpy as np
from scipy.integrate import odeint
from random import randint

from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import time as tm

edgeTable = [
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1],
 [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1],
 [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0],
 [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
 [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1],
 [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1],
 [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0],
 [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
 [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1],
 [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
 [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0],
 [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0],
 [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1],
 [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1],
 [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0],
 [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1],
 [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1],
 [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0],
 [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0],
 [0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1],
 [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1],
 [0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0],
 [1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0],
 [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1],
 [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1],
 [1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0],
 [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0],
 [1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1],
 [1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1],
 [1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0],
 [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0],
 [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1],
 [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1],
 [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0],
 [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0],
 [0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1],
 [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1],
 [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0],
 [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0],
 [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1],
 [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
 [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0],
 [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0],
 [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1],
 [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1],
 [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0],
 [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0],
 [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1],
 [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1],
 [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0],
 [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0],
 [0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1],
 [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1],
 [0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0],
 [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0],
 [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1],
 [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1],
 [1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0],
 [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0],
 [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1],
 [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1],
 [1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
 [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
 [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1],
 [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1],
 [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0],
 [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0],
 [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
 [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1],
 [0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0],
 [1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0],
 [1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1],
 [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1],
 [1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0],
 [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0],
 [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1],
 [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1],
 [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0],
 [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0],
 [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1],
 [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1],
 [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0],
 [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0],
 [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],
 [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
 [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0],
 [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
 [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1],
 [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
 [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0],
 [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0],
 [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1],
 [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
 [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0],
 [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0],
 [0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1],
 [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1],
 [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0],
 [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0],
 [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1],
 [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1],
 [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0],
 [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0],
 [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],
 [1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1],
 [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0],
 [1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0],
 [1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1],
 [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1],
 [1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0],
 [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
 [0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1],
 [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1],
 [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0],
 [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0],
 [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1],
 [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1],
 [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
 [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0],
 [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1],
 [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1],
 [1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0],
 [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0],
 [1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1],
 [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1],
 [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
 [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
 [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1],
 [1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1],
 [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0],
 [1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0],
 [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1],
 [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1],
 [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0],
 [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
 [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1],
 [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1],
 [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0],
 [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0],
 [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1],
 [0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1],
 [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
 [1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0],
 [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1],
 [1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1],
 [1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0],
 [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0],
 [1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1],
 [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],
 [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0],
 [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0],
 [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1],
 [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1],
 [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0],
 [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0],
 [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1],
 [0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1],
 [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0],
 [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0],
 [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
 [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1],
 [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0],
 [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0],
 [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
 [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1],
 [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
 [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0],
 [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
 [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],
 [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0],
 [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0],
 [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1],
 [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1],
 [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0],
 [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0],
 [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1],
 [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1],
 [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0],
 [1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0],
 [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1],
 [1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1],
 [1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0],
 [0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0],
 [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1],
 [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
 [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0],
 [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0],
 [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1],
 [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1],
 [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
 [1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
 [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1],
 [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1],
 [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0],
 [1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0],
 [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1],
 [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1],
 [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0],
 [0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0],
 [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1],
 [0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1],
 [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0],
 [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0],
 [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1],
 [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1],
 [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0],
 [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0],
 [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1],
 [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1],
 [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0],
 [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0],
 [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
 [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1],
 [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0],
 [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0],
 [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1],
 [0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1],
 [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0],
 [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0],
 [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1],
 [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1],
 [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0],
 [1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0],
 [1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1],
 [1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1],
 [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0],
 [1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0],
 [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1],
 [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1],
 [1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0],
 [0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0],
 [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1],
 [0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1],
 [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0],
 [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0],
 [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1],
 [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1],
 [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0],
 [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
 [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1],
 [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1],
 [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0],
 [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0],
 [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
 [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1],
 [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
 [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0],
 [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1],
 [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1],
 [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
 [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0],
 [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1],
 [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
 
triTable = [
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1],
[3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1],
[3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1],
[3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1],
[9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1],
[1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1],
[9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1],
[2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1],
[8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1],
[9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1],
[4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1],
[3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1],
[1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1],
[4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1],
[4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1],
[9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1],
[1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1],
[5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1],
[2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1],
[9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1],
[0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1],
[2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1],
[10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1],
[4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1],
[5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1],
[5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1],
[9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1],
[0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1],
[1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1],
[10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1],
[8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1],
[2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1],
[7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1],
[9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1],
[2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1],
[11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1],
[9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1],
[5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1],
[11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1],
[11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1],
[1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1],
[9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1],
[5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1],
[2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1],
[0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1],
[5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1],
[6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1],
[0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1],
[3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1],
[6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1],
[5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1],
[1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1],
[10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1],
[6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1],
[1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1],
[8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1],
[7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1],
[3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1],
[5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1],
[0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1],
[9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1],
[8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1],
[5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1],
[0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1],
[6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1],
[10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1],
[10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1],
[8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1],
[1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1],
[3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1],
[0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1],
[10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1],
[0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1],
[3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1],
[6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1],
[9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1],
[8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1],
[3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1],
[6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1],
[0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1],
[10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1],
[10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1],
[1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1],
[2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1],
[7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1],
[7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1],
[2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1],
[1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1],
[11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1],
[8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1],
[0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1],
[7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1],
[10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1],
[2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1],
[6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1],
[7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1],
[2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1],
[1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1],
[10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1],
[10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1],
[0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1],
[7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1],
[6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1],
[8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1],
[9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1],
[6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1],
[1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1],
[4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1],
[10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1],
[8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1],
[0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1],
[1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1],
[8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1],
[10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1],
[4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1],
[10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1],
[5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1],
[11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1],
[9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1],
[6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1],
[7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1],
[3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1],
[7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1],
[9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1],
[3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1],
[6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1],
[9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1],
[1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1],
[4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1],
[7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1],
[6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1],
[3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1],
[0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1],
[6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1],
[1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1],
[0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1],
[11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1],
[6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1],
[5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1],
[9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1],
[1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1],
[1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1],
[10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1],
[0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1],
[5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1],
[10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1],
[11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1],
[0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1],
[9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1],
[7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1],
[2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1],
[8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1],
[9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1],
[9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1],
[1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1],
[9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1],
[9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1],
[5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1],
[0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1],
[10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1],
[2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1],
[0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1],
[0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1],
[9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1],
[5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1],
[3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1],
[5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1],
[8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1],
[0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1],
[9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1],
[0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1],
[1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1],
[3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1],
[4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1],
[9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1],
[11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1],
[11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1],
[2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1],
[9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1],
[3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1],
[1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1],
[4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1],
[4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1],
[0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1],
[3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1],
[3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1],
[0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1],
[9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1],
[1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]

## Paramètres

# sphère : x**2 +y**2 + z**2 - 9
# tore : (x**2 + y**2 + z**2 + 4 - 0.5**2)**2 - 16*(x**2 + y**2)
# cylindre : x**2 + y**2 - 9
# paraboloïde : x**2 + y**2 - z
# verre à vin : x**2 +y**2 - (np.log(z+3.2))**2 - 0.02
# genre 2 : (x*(x-1)**2*(x-2) + y**2)**2 + z**2 - 0.01
# coeur : (x**2 + (9/4)*y**2 + z**2 - 1)**3 - x**2 * z**3 - (9/80)* y**2 * z**3


def f(x, y, z):
    """ fonction définissant la surface """
    return((x**2 + y**2 + z**2 + 12)**2 - 64 * (x**2 + y**2))
        
    
nb = 20 # nombre de subdivision par dimension (x, y, z)

infGrid = -6 # coordonnées extrêmes délimitant le quadrillage
supGrid = 6


## Créations des classes
    
class Point:
    def __init__(self, vx=0, vy=0, vz=0):
        self.x = vx
        self.y = vy
        self.z = vz
        
    def __repr__(self):
        return("(" + str(self.x) + " " + str(self.y) + " " + str(self.z) + ")")
    
class Grid:
    def __init__(self, nb, inf = infGrid, sup = supGrid):
        self.x = np.linspace(inf, sup, nb)
        self.y = np.linspace(inf, sup, nb)
        self.z = np.linspace(inf, sup, nb)
    
    def pt(self, i, j, k):
        """ Renvoie le triplet de coordonnées correspondant """
        return(Point(grid.x[i], grid.y[j], grid.z[k]))


grid = Grid(nb)


def interpolation(p1, p2, v1, v2):
    """ Interpolation linéaire de l'intersection de l'arrête entre p1 et p2
    avec la surface, v1 et v2 étant les valeurs de f en p1 et p2 """
    if abs(v1) < 0.000001:
        return(p1)
    if abs(v2) < 0.000001:
        return(p2)
    if abs(v2 - v1) < 0.000001:
        return(Point((p1.x + p2.x)/2, (p1.y + p2.y)/2, (p1.z + p2.z)/2))
    mu = - v1 / (v2 - v1)
    x = p1.x + mu * (p2.x - p1.x);
    y = p1.y + mu * (p2.y - p1.y);
    z = p1.z + mu * (p2.z - p1.z);
    return(Point(x, y, z))


class Cube:
    def __init__(self, i, j, k):
        
        # Sommets composant le cube
        sommets = []
        sommets.append(grid.pt(i, j, k))
        sommets.append(grid.pt(i, j+1, k))
        sommets.append(grid.pt(i+1, j+1, k))
        sommets.append(grid.pt(i+1, j, k))
        sommets.append(grid.pt(i, j, k+1))
        sommets.append(grid.pt(i, j+1, k+1))
        sommets.append(grid.pt(i+1, j+1, k+1))
        sommets.append(grid.pt(i+1, j, k+1))
        self.s = sommets
        
        # Valeurs de f en les sommets
        valeurs = []
        for i in range(8):
            p = sommets[i]
            valeurs.append(f(p.x, p.y, p.z))
        self.v = valeurs
        
        # Indice d'intersection
        indice = 0
        for i in range(8):
            if valeurs[i] <= 0:
                indice += 2**i
        self.indice = indice
        
        # Intersection avec la surface sur les arrêtes
        intersections = [Point(0, 0, 0)]*12

        if edgeTable[indice][11]:
            intersections[0] = interpolation(sommets[0], sommets[1], valeurs[0], valeurs[1])
        if edgeTable[indice][10]:
            intersections[1] = interpolation(sommets[1], sommets[2], valeurs[1], valeurs[2])
        if edgeTable[indice][9]:
            intersections[2] = interpolation(sommets[2], sommets[3], valeurs[2], valeurs[3])
        if edgeTable[indice][8]:
            intersections[3] = interpolation(sommets[3], sommets[0], valeurs[3], valeurs[0])
        if edgeTable[indice][7]:
            intersections[4] = interpolation(sommets[4], sommets[5], valeurs[4], valeurs[5])
        if edgeTable[indice][6]:
            intersections[5] = interpolation(sommets[5], sommets[6], valeurs[5], valeurs[6])
        if edgeTable[indice][5]:
            intersections[6] = interpolation(sommets[6], sommets[7], valeurs[6], valeurs[7])
        if edgeTable[indice][4]:
            intersections[7] = interpolation(sommets[7], sommets[4], valeurs[7], valeurs[4])
        if edgeTable[indice][3]:
            intersections[8] = interpolation(sommets[0], sommets[4], valeurs[0], valeurs[4])
        if edgeTable[indice][2]:
            intersections[9] = interpolation(sommets[1], sommets[5], valeurs[1], valeurs[5])
        if edgeTable[indice][1]:
            intersections[10] = interpolation(sommets[2], sommets[6], valeurs[2], valeurs[6])
        if edgeTable[indice][0]:
            intersections[11] = interpolation(sommets[3], sommets[7], valeurs[3], valeurs[7])
        
        self.inter = intersections
            
## Algorithme

def marchingCube():

    triangles = []
    
    for i in range(nb-1):
        for j in range(nb-1):
            for k in range(nb-1):
                cube = Cube(i, j, k)
                
                l = 0
                while triTable[cube.indice][l] != -1:
                    p1 = cube.inter[triTable[cube.indice][l]]
                    p2 = cube.inter[triTable[cube.indice][l+1]]
                    p3 = cube.inter[triTable[cube.indice][l+2]]
                    triangles.append((p1, p2, p3))
                    l += 3
                    
    return(triangles)
    

## Affichage

def affichage(chemin):
    fig = plt.figure()
    ax = Axes3D(fig)


    for (p1, p2, p3) in triangles:
        xs=[]
        ys=[]
        zs=[]
        xs.append(p1.x)
        ys.append(p1.y)
        zs.append(p1.z)
        xs.append(p2.x)
        ys.append(p2.y)
        zs.append(p2.z)
        xs.append(p3.x)
        ys.append(p3.y)
        zs.append(p3.z)
        xs.append(p1.x)
        ys.append(p1.y)
        zs.append(p1.z)
        
        ax.plot(xs, ys, zs, c='r', marker='.')
    
    plt.plot([depart[0]],[depart[1]],[depart[2]], c ='m', marker='o', markersize = 10)
    plt.plot([arrivee[0]],[arrivee[1]],[arrivee[2]], c ='g', marker='o', markersize = 10)
    
    ax.plot(chemin[:, 0], chemin[:, 1], chemin[:, 2], c='b', marker='.')
    plt.show()
    
triangles = marchingCube()

## Affectations

x, y, z = sp.symbols("x, y, z") #Coordonnees

f = (x**2 + y**2)**2 - 64 #Surface

def grad(f, coord):
    """ Donne le gradient de f(coord) """
    gradient = []
    for a in coord:
        gradient.append(sp.diff(f, a))
    return(sp.Matrix(gradient))
    
G = grad(f, [x, y, z]) # Gradient de f

H = sp.hessian(f, [x, y, z]) # Hessienne de f

def dH(f, coord):
    H = list(sp.hessian(f, coord))
    for i in range(len(coord)):
        for j in range(len(coord)):
            d = []
            for a in coord:
                d.append(sp.diff(H[i*len(coord)+j], a))
            H[i*len(coord)+j] = d
    return np.reshape(np.array(H), (3, 3, 3))
    
I = dH(f, [x, y, z]) 

vx, vy, vz = sp.symbols("vx, vy, vz") # Coordonnées du vecteur vitesse instantanée de la géodésique
V = sp.Matrix([vx, vy, vz])

px, py, pz = sp.symbols("px, py, pz") # Coordonnées de la dérivée par rapport à h
P = sp.Matrix([px, py, pz])

pvx, pvy, pvz = sp.symbols("pvx, pvy, pvz") # Coordonnées du vecteur vitesse instantanée de la dérivée par rapport à h
PV = sp.Matrix([pvx, pvy, pvz])

## Equations

equa1 = sp.lambdify((x,y,z,vx,vy,vz), -(G /(G.T*G)[0]) * (V.T * H * V)[0])

special = sp.Matrix(np.dot(I, np.array([px, py, pz])))

equa2 = sp.lambdify((x, y, z, vx, vy, vz, px, py, pz, pvx, pvy, pvz), 2 * (G * G.T * H * P)/ ((G.T * G)[0])**2 - (H * P)/(G.T * G)[0]*(V.T * H * V)[0] - (G / (G.T * G)[0]) * ((V.T * special * V) + (V.T * H * PV) + (PV.T * H * V))[0])

## Résolution : Méthode d'Euler

def euler(f, Y0, T):
    solution = [np.array(Y0)] * len(T)
    for i in range(0, len(T)-1):
        solution[i+1] = solution[i] + (T[i+1] - T[i]) * np.array(f(solution[i], T[i]))
    return(solution)
   
## Algorithme

def geodesique(depart, arrivee, N, epsilon):
    
    #Création de la fonction gradient et évaluation au point de départ
    
    fonction_grad = sp.lambdify((x,y,z), G)
    gradient = fonction_grad(depart[0],depart[1],depart[2])
    
    #Choix d'une base de vecteurs tangents à la surface au point de départ
    
    if gradient[0] > 0.0001 :
        VX = [float(gradient[2])/100, 0, - float(gradient[0])/100]
        VY = [float(gradient[1])/100, -float(gradient[0])/100, 0]
    elif gradient[1] > 0.0001 :
        VX = [0, float(gradient[2])/100, - float(gradient[1])/100]
        VY = [float(gradient[1])/100, -float(gradient[0])/100, 0]
    else : 
        VX = [0, float(gradient[2])/100, - float(gradient[1])/100]
        VY = [float(gradient[2])/100, 0, - float(gradient[0])/100]
        
    print(VX)
    print(VY)
        
    #Orthonormalisation de la base
    
    norme1 = np.sqrt((VX[0]**2)+(VX[1]**2)+(VX[2]**2))
    V1 = [VX[0]/norme1, VX[1]/norme1, VX[2]/norme1]
    
    schmidt = -(V1[0]*VY[0] + V1[1]*VY[1] + V1[2]*VY[2])
    V2 = [VY[0] + schmidt * V1[0], VY[1] + schmidt * V1[1], VY[2] + schmidt * V1[2]]
    norme2 = np.sqrt((V2[0]**2)+(V2[1]**2)+(V2[2]**2))
    V2 = [V2[0]/norme2, V2[1]/norme2, V2[2]/norme2]
    
    print(V1)
    print(V2)
    
    #Création du temps
    
    T = np.linspace(0, 1, N)
    
    #Initialisation du nombre de géodésiques calculées
    
    iter = 1
    
    #Introduction des deux équations différentielles
    
    def f1(X, t):
        """fonction donnant la ligne géodésique grâce à (x'', y'', z'') a partir de (x, y, z, x', y', z') et de t"""
        A = equa1(X[0], X[1], X[2], X[3], X[4], X[5])
        return([X[3], X[4], X[5], A[0], A[1], A[2]])
        
    def f3(X, t):
        """fonction donnant phi selon un vecteur de la base des vitesses tangentes"""
        A = equa2(chemin[int(t * (N-1))][0], chemin[int(t * (N-1))][1], chemin[int(t * (N-1))][2], chemin[int(t * (N-1))][3], chemin[int(t * (N-1))][4], chemin[int(t * (N-1))][5], X[0], X[1], X[2], X[3], X[4], X[5])
        return([X[3], X[4], X[5], A[0], A[1], A[2]])
    
    #Choix d'un vecteur vitesse initiale 
    
    V = [V1[0] + V2[0], V1[1] + V2[1], V1[2] + V2[2]]
    
    #Calcul de la géodésique 
    
    chemin = odeint(f1, depart + V, T)
    
    #Calcul du point d'arrivée de la géodésique
    
    fin = sp.Matrix([chemin[-1][0], chemin[-1][1], chemin[-1][2]])
        
    #Calcul de l'écart entre le point d'arrivée et le point désiré
    
    ecart = sp.sqrt(((fin - sp.Matrix(arrivee)).T * (fin - sp.Matrix(arrivee)))[0])
    
    print("L'écart vaut")
    print(ecart)
    
    while ecart > epsilon :
        
        print("======")
        print("STEP " + str(iter))
                        
        #Calcul de phi_V1
        
        phi_V1 = euler(f3, [0, 0, 0] + V1, T)
        
        #Calcul de phi_V2
        
        phi_V2 = euler(f3, [0, 0, 0] + V2, T)
        
        #Calcul de la dérivée partielle de G selon V1
        
        G_partielleV1 = ((sp.Matrix(phi_V1[-1][0:3])).T * (fin - sp.Matrix(arrivee)))[0] / ecart
        
        #Calcul de la dérivée partielle de G selon V2
        
        G_partielleV2 = ((sp.Matrix(phi_V2[-1][0:3])).T * (fin - sp.Matrix(arrivee)))[0] / ecart
        
        #Calcul du facteur nécessaire à la méthode du gradient
        
        beta = ecart / (G_partielleV1**2 + G_partielleV2**2)
        
        #Modification du vecteur vitesse initiale avec la méthode du gradient
        
        V[0] = V[0] - (G_partielleV1*V1[0] + G_partielleV2*V2[0])*beta
        V[1] = V[1] - (G_partielleV1*V1[1] + G_partielleV2*V2[1])*beta
        V[2] = V[2] - (G_partielleV1*V1[2] + G_partielleV2*V2[2])*beta
        
        #Calcul du nouveau chemin
        
        chemin = odeint(f1, depart + V, T)
        
        #Calcul du nouveau point d'arrivée
    
        fin = sp.Matrix([chemin[-1][0], chemin[-1][1], chemin[-1][2]])
    
        ecart = sp.sqrt(((fin - sp.Matrix(arrivee)).T * (fin - sp.Matrix(arrivee)))[0])
        
        iter = iter + 1
        
        print("L'écart vaut")
        print(ecart)
        
        #Changement de vitesse au hasard
        
        if iter % 200 == 0 and ecart > 1 :
            alpha = 1/randint(1,1000)
            vitesse = [alpha*V1[i]+(1-alpha)*V2[i] for i in range (0,3)]
            V = vitesse
            print("VITESSE AU HASARD")
            
    print(iter)        
    affichage(chemin)
    


## Utilisation de l'algorithme

N = 100
depart = [-2,2,2]
arrivee = [2,2,0]
epsilon = 0.01

temps = tm.time()

geodesique(depart,arrivee,N,epsilon)  

temps = tm.time() - temps

print(temps)







